package com.example.easymovefront.ui.maps;

import android.app.Dialog;
import android.content.Context;
import android.os.Bundle;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ImageView;
import android.widget.TextView;

import androidx.appcompat.app.AlertDialog;
import androidx.fragment.app.DialogFragment;

import com.example.easymovefront.R;
import com.google.android.gms.maps.model.Marker;

public class DisplayObstacleFragment extends DialogFragment {
    private Context mContext;
    private Marker mMarker;

    public DisplayObstacleFragment(Context context, Marker marker) {
        mContext = context;
        mMarker = marker;
    }

    @Override
    public Dialog onCreateDialog(Bundle savedInstanceState) {
        AlertDialog.Builder builder = new AlertDialog.Builder(getActivity());
        // Get the layout inflater
        LayoutInflater inflater = requireActivity().getLayoutInflater();
        final View editTextView = inflater.inflate(R.layout.fragment_display_obstacle, null);
        ImageView pic = editTextView.findViewById(R.id.obstacleView);
        TextView title = editTextView.findViewById(R.id.titleObstacle);
        String picString = "";
        pic.setImageBitmap(MapsActivity.StringToBitMap(picString));
        title.setText(mMarker.getTitle());
        builder.setView(editTextView);
        return builder.create();
    }

    @Override
    public View onCreateView(LayoutInflater inflater, ViewGroup container,
                             Bundle savedInstanceState) {
        View view = inflater.inflate(R.layout.fragment_display_obstacle, container);
        return view;
    }
}